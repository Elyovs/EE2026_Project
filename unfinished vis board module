`timescale 1ns / 1ps

module board_visualisation (
    input CLOCK, 
    input [8:0]old_x, old_y, new_x, new_y,
  //  input [63:0] available_moves,
    input [2:0] state,
    input [1:0] player,
    input [12:0] pix_index,
    output reg [15:0] oled_data
    );    
    


    wire [7:0] x;
    wire [6:0] y;
    assign x = pix_index%96;
    assign y = pix_index/96;
            

    reg [5:0] chess_board [7:0][7:0]; 
    
    
    //determining the colour of the piece
    reg [15:0]colour;
    parameter BLACK = 16'b00000_000000_00000;   
    parameter WHITE = 16'b11010_110101_11010;   //it's actually grey colour but i just write white for the sake of understanding
    initial begin
        colour <= (player) ? WHITE : BLACK;    //if 1 then white(grey), if 0 then black
        end                                    //under the assumption: if player(1) == 1, so it's p1, then it's white(1). if not black
                                               //might change when i get the input variables or whatnot for players
       
    
    // parameters for the pieces or empty based on the input
    parameter EMPTY = 3'b000;

    
    reg [8:0]old_x_coord = 0;
    reg [8:0]old_y_coord = 0;
    
    reg [8:0]new_x_coord = 0;
    reg [8:0]new_y_coord = 0;
    
    
    wire [15:0]oled_data_old;
    wire [15:0]oled_data_new;
 
 
    
    always @ (posedge CLOCK)
       begin 
       
       old_x_coord <= (old_x * 8);    //xy coodinates for art initialises at top left of each square,
       old_y_coord <= (old_y * 8);         //so can calculate from 2d array index value
       new_x_coord <= (new_x * 8);
       new_y_coord <= (new_y * 8);
       end
       
       

         //changing the old square into empty
          // art old_art(CLOCK, old_x_coord, old_y_coord, pix_index, colour, EMPTY, oled_data_old);
                  
    //changing the new square into whatever new piece
    art new_art(CLOCK, new_x_coord, new_y_coord, pix_index, colour, state, oled_data_new);
    
    
    always @ (posedge CLOCK)
    begin 
    
     if ((x >= new_x_coord + 16 && x < new_x_coord + 24) && (y >= new_y_coord && y < new_y_coord + 8)) 
     begin
        oled_data <= oled_data_new;
     end
    
    // im pretty sure i cant do the board like this bc if i do it like this it'll erase all the other pieces so i dont know
       else if (x > 15 && x < 81 && 
            (((y <= 7) || (y >= 16 && y < 24) || (y >= 32 && y <40) || (y >= 48 && y < 56)) && 
            ((x >= 16 && x < 24) || (x >= 32 && x < 40) || (x >= 48 && x < 56) || (x >= 64 && x < 72))) ||
            (((y >= 8 && y < 16) || (y >= 24 && y < 32) || ( y >= 40 && y < 48) || (y >= 56)) &&
            ((x >= 24 && x < 32) || ( x >= 40 && x < 48) || (x >= 56 && x < 64) || (x >= 72 && x < 80))) )       
         begin
            oled_data <= 16'b11111_111111_11111;
         end
         
          else if (x < 16 || x > 80)
          begin
            oled_data <= 16'b00000_000000_00000;
          end
                

         else begin
            oled_data <= 16'b10010_010011_00010;
         end
     end
    
    
 
           

endmodule    
